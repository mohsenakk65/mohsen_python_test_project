{"name": "login Test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: Unable to clear element that cannot be edited: <div class=\"lg:text-body-2 text-button-1 flex items-center h-full text-body-2 text-neutral-500\">", "trace": "self = <tests.test_search.Testsearch object at 0x1022dd6c0>\n\n    @allure.description(\"login test\")\n    @allure.title(\"login Test\")\n    @pytest.mark.run()\n    def test_valid_search(self):\n        searchpage = search_Page(self.driver)\n>       searchpage.click_search_bar()\n\ntests/test_search.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/search_product.py:22: in click_search_bar\n    self.fill_text(self.search_icon, \"iphon\")\npages/base_page.py:19: in fill_text\n    el.clear()\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:95: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1015f1660>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Unable to clear element that cannot be ...ys.mjs:335:22\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:216:16\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: Unable to clear element that cannot be edited: <div class=\"lg:text-body-2 text-button-1 flex items-center h-full text-body-2 text-neutral-500\">\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:242: InvalidElementStateException"}, "description": "login test", "steps": [{"name": "Click on search bar", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: Unable to clear element that cannot be edited: <div class=\"lg:text-body-2 text-button-1 flex items-center h-full text-body-2 text-neutral-500\">\n\n", "trace": "  File \"/Users/mohsenakbari/Downloads/Python-Selenium-Pytest-main/.venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"/Users/mohsenakbari/Downloads/Python-Selenium-Pytest-main/pages/search_product.py\", line 22, in click_search_bar\n    self.fill_text(self.search_icon, \"iphon\")\n  File \"/Users/mohsenakbari/Downloads/Python-Selenium-Pytest-main/pages/base_page.py\", line 19, in fill_text\n    el.clear()\n  File \"/Users/mohsenakbari/Downloads/Python-Selenium-Pytest-main/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 95, in clear\n    self._execute(Command.CLEAR_ELEMENT)\n  File \"/Users/mohsenakbari/Downloads/Python-Selenium-Pytest-main/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/Users/mohsenakbari/Downloads/Python-Selenium-Pytest-main/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/mohsenakbari/Downloads/Python-Selenium-Pytest-main/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1737733785715, "stop": 1737733785988}], "attachments": [{"name": "log", "source": "39d0a4ec-c966-41e4-a70e-7203e0da0374-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "3fddf66d-b268-4a44-919a-394b495a6888-attachment.txt", "type": "text/plain"}], "start": 1737733785715, "stop": 1737733785991, "uuid": "f18d7390-b0b1-4935-9f49-3274bc619764", "historyId": "545a9b7d6e6cedaf841b6e0b04bcf36b", "testCaseId": "8f77a91207b3a16152ce24dbd767ce7e", "fullName": "tests.test_search.Testsearch#test_valid_search", "labels": [{"name": "epic", "value": "login"}, {"name": "story", "value": "login Feature Functionality"}, {"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_search"}, {"name": "subSuite", "value": "Testsearch"}, {"name": "host", "value": "Mohsens-MacBook-Air.local"}, {"name": "thread", "value": "64125-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_search"}]}