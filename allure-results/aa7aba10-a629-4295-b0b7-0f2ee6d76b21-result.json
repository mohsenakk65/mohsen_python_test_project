{"name": "login Test", "status": "broken", "statusDetails": {"message": "ValueError: response body:\n<?xml version='1.0' encoding='UTF-8'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>We're sorry, but this service is not available in your location</Details></Error>\nrequest url:\nhttps://storage.googleapis.com/chrome-for-testing-public/132.0.6834.110/mac-arm64/chromedriver-mac-arm64.zip\nresponse headers:\n{'X-GUploader-UploadID': 'AFIdbgRc7MrR1WEHlQ3OpKl_Kh-CJdsfJogwTP1xciHdnnYc2oJ1y3iDRuaRGQ5rGCkF3ikIY980Pok', 'Content-Type': 'application/xml; charset=UTF-8', 'Content-Length': '193', 'Date': 'Fri, 24 Jan 2025 08:22:54 GMT', 'Expires': 'Fri, 24 Jan 2025 08:22:54 GMT', 'Cache-Control': 'private, max-age=0', 'Server': 'UploadServer', 'Alt-Svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000'}", "trace": "prep_properties = <utils.config_parser.ConfigParserIni object at 0x1068b56f0>, request = <SubRequest 'create_driver' for <Function test_valid_login>>\n\n    @pytest.fixture(autouse=True)\n    # Performs setup and tear down\n    def create_driver(prep_properties, request):\n        global driver\n        browser = request.config.option.browser\n        base_url = prep_properties.config_section_dict(\"AUT\")[\"base_url\"]\n    \n        if browser == \"firefox\":\n            driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())\n        elif browser == \"remote\":\n            capabilities = {\n                'browserName': 'firefox',\n                'javascriptEnabled': True\n            }\n            driver = webdriver.Remote(command_executor=\"http://127.0.0.1:4444/wd/hub\", desired_capabilities=capabilities)\n        elif browser == \"chrome_headless\":\n            opts = webdriver.ChromeOptions()\n            opts.add_argument(\"--headless\")\n            opts.add_argument(\"--disable-gpu\")\n            opts.add_argument(\"--disable-dev-shm-usage\")\n            opts.add_argument(\"--no-sandbox\")\n            opts.add_argument(\"--window-size=1920,1080\")\n>           driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=opts)\n\ntests/conftest.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.10/site-packages/webdriver_manager/chrome.py:40: in install\n    driver_path = self._get_driver_binary_path(self.driver)\n.venv/lib/python3.10/site-packages/webdriver_manager/core/manager.py:40: in _get_driver_binary_path\n    file = self._download_manager.download_file(driver.get_driver_download_url(os_type))\n.venv/lib/python3.10/site-packages/webdriver_manager/core/download_manager.py:29: in download_file\n    response = self._http_client.get(url)\n.venv/lib/python3.10/site-packages/webdriver_manager/core/http.py:36: in get\n    self.validate_response(resp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresp = <Response [403]>\n\n    @staticmethod\n    def validate_response(resp: requests.Response):\n        status_code = resp.status_code\n        if status_code == 404:\n            raise ValueError(f\"There is no such driver by url {resp.url}\")\n        elif status_code == 401:\n            raise ValueError(f\"API Rate limit exceeded. You have to add GH_TOKEN!!!\")\n        elif resp.status_code != 200:\n>           raise ValueError(\n                f\"response body:\\n{resp.text}\\n\"\n                f\"request url:\\n{resp.request.url}\\n\"\n                f\"response headers:\\n{dict(resp.headers)}\\n\"\n            )\nE           ValueError: response body:\nE           <?xml version='1.0' encoding='UTF-8'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>We're sorry, but this service is not available in your location</Details></Error>\nE           request url:\nE           https://storage.googleapis.com/chrome-for-testing-public/132.0.6834.110/mac-arm64/chromedriver-mac-arm64.zip\nE           response headers:\nE           {'X-GUploader-UploadID': 'AFIdbgRc7MrR1WEHlQ3OpKl_Kh-CJdsfJogwTP1xciHdnnYc2oJ1y3iDRuaRGQ5rGCkF3ikIY980Pok', 'Content-Type': 'application/xml; charset=UTF-8', 'Content-Length': '193', 'Date': 'Fri, 24 Jan 2025 08:22:54 GMT', 'Expires': 'Fri, 24 Jan 2025 08:22:54 GMT', 'Cache-Control': 'private, max-age=0', 'Server': 'UploadServer', 'Alt-Svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000'}\n\n.venv/lib/python3.10/site-packages/webdriver_manager/core/http.py:19: ValueError"}, "description": "login test", "start": 1737706967308, "stop": 1737706967308, "uuid": "92ff027b-82f5-4e0d-8890-07801c4f6e19", "historyId": "d8b4682f42ccfbeb5b4159d2a4b86630", "testCaseId": "702f2e8aa37bfccd24b69d5590e005d4", "fullName": "tests.test_login.TestSign#test_valid_login", "labels": [{"name": "severity", "value": "blocker"}, {"name": "epic", "value": "login"}, {"name": "story", "value": "login Feature Functionality"}, {"name": "tag", "value": "run"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestSign"}, {"name": "host", "value": "Mohsens-MacBook-Air.local"}, {"name": "thread", "value": "43127-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}