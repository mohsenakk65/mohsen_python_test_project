{"name": "Sign Test", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [403]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n.venv/lib/python3.10/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x1032f1240>\ns = \"<?xml version='1.0' encoding='UTF-8'?><Error><Code>AccessDenied</Code><Message>Access denied.</Message><Details>We're sorry, but this service is not available in your location</Details></Error>\"\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nprep_properties = <utils.config_parser.ConfigParserIni object at 0x1047a1990>, request = <SubRequest 'create_driver' for <Function test_valid_login>>\n\n    @pytest.fixture(autouse=True)\n    # Performs setup and tear down\n    def create_driver(prep_properties, request):\n        global browser, base_url, driver\n        browser = request.config.option.browser\n        base_url = prep_properties.config_section_dict(\"AUT\")[\"base_url\"]\n    \n        if browser == \"firefox\":\n            driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())\n        elif browser == \"remote\":\n            capabilities = {\n               'browserName': 'firefox',\n    \t\t\t'javascriptEnabled': True\n            }\n            driver = webdriver.Remote(command_executor=\"http://127.0.0.1:4444/wd/hub\", desired_capabilities=capabilities)\n        elif browser == \"chrome_headless\":\n            opts = webdriver.ChromeOptions()\n            opts.add_argument(\"--headless\")\n            opts.add_argument(\"--disable-dev-shm-usage\")\n            opts.add_argument(\"--no-sandbox\")\n>           driver = webdriver.Chrome(ChromeDriverManager().install(), options=opts)\n\ntests/conftest.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.10/site-packages/webdriver_manager/chrome.py:32: in install\n    driver_path = self._get_driver_path(self.driver)\n.venv/lib/python3.10/site-packages/webdriver_manager/manager.py:22: in _get_driver_path\n    driver_version = driver.get_version()\n.venv/lib/python3.10/site-packages/webdriver_manager/driver.py:40: in get_version\n    return self.get_latest_release_version()\n.venv/lib/python3.10/site-packages/webdriver_manager/driver.py:64: in get_latest_release_version\n    validate_response(resp)\n.venv/lib/python3.10/site-packages/webdriver_manager/utils.py:81: in validate_response\n    raise ValueError(resp.json())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [403]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n.venv/lib/python3.10/site-packages/requests/models.py:978: JSONDecodeError"}, "description": "sign test", "attachments": [{"name": "log", "source": "cd5e429f-8a59-4eb2-bf81-d2500447ebc7-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "0bf769f6-1b38-4553-ad35-e4f0e545f31c-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "020e84a6-a92d-42b5-822e-0dab8fbf9445-attachment.txt", "type": "text/plain"}], "start": 1737705730833, "stop": 1737705730833, "uuid": "1394d980-046a-4f67-a900-0d6df0421241", "historyId": "702f2e8aa37bfccd24b69d5590e005d4", "testCaseId": "702f2e8aa37bfccd24b69d5590e005d4", "fullName": "tests.test_login.TestSign#test_valid_login", "labels": [{"name": "severity", "value": "blocker"}, {"name": "story", "value": "login Feature Functionality"}, {"name": "epic", "value": "login"}, {"name": "tag", "value": "run"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestSign"}, {"name": "host", "value": "Mohsens-MacBook-Air.local"}, {"name": "thread", "value": "39586-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}