{"name": "test_update_financier", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 200, got 400: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\"http://www.w3.org/TR/html4/strict.dtd\">\r\n<HTML><HEAD><TITLE>Bad Request</TITLE>\r\n<META HTTP-EQUIV=\"Content-Type\" Content=\"text/html; charset=us-ascii\"></HEAD>\r\n<BODY><h2>Bad Request - Invalid URL</h2>\r\n<hr><p>HTTP Error 400. The request URL is invalid.</p>\r\n</BODY></HTML>", "trace": "self = <tests.test_financier.TestFinancierCRUD object at 0x102fd67d0>\naccess_token = 'eyJhbGciOiJSUzI1NiIsImtpZCI6IkQwMUQ1NkY1OUYxQTgxNzVGNTYxNjIxRDM5RjlCOUE0IiwidHlwIjoiYXQrand0In0.eyJpc3MiOiJodHRwOi8vb...GdKGpMjaBSjqR3h7RrxVniC9b_UaE_9o8e4g8zh_CGeZfuPxtYjVGfdYNaqnEMTjMOv8MXxMffmk811nZmYZQs_AGTVbe7N5NjPn18rXNc0p88AG4HyxCA'\nfinancier_data = {'address': '', 'description': '', 'email': 'VححHkممصsش@example.com', 'financierAgents': [{'email': 'test@gmail.com', ...121152460', ...}, {'email': 'test@gmail.com', 'firstName': 'الف', 'lastName': 'ب', 'mobile': '09121152460', ...}], ...}\ntenant_id = 38888\n\n    def   test_update_financier(self, access_token, financier_data, tenant_id):\n        \"\"\"\n        Test updating a financier with valid data.\n        \"\"\"\n        financier_service = financeiservises(access_token)\n        financier_id = financier_service.Create_financier(financier_data).json()\n        financier_data = modify_json_data(\n            financier_data,\n            {\n                \"tenantId\": tenant_id,\n                \"name\": Random_value.generate_name(10),\n                \"email\": Random_value.generate_email(),\n                \"mobile\": Random_value.generate_mobile_number(),\n            }\n        )\n        response = financier_service.update_financier_by_id(financier_id, financier_data)\n        print(response)\n>       validate_response(response, 200)\n\ntests/test_financier.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>, expected_status_code = 200\n\n    def validate_response(response, expected_status_code):\n>       assert response.status_code == expected_status_code, f\"Expected {expected_status_code}, got {response.status_code}: {response.text}\"\nE       AssertionError: Expected 200, got 400: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\"http://www.w3.org/TR/html4/strict.dtd\">\r\nE       <HTML><HEAD><TITLE>Bad Request</TITLE>\r\nE       <META HTTP-EQUIV=\"Content-Type\" Content=\"text/html; charset=us-ascii\"></HEAD>\r\nE       <BODY><h2>Bad Request - Invalid URL</h2>\r\nE       <hr><p>HTTP Error 400. The request URL is invalid.</p>\r\nE       </BODY></HTML>\n\nutils/helpers.py:2: AssertionError"}, "description": "\n        Test updating a financier with valid data.\n        ", "attachments": [{"name": "stdout", "source": "3fad96e5-5bad-4283-b828-dacd0e6b1670-attachment.txt", "type": "text/plain"}], "start": 1737365767885, "stop": 1737365767984, "uuid": "7395878a-6661-4de2-95ba-f59f5a05ff8c", "historyId": "2293d3ae3099d3067ec01f26fae22933", "testCaseId": "2293d3ae3099d3067ec01f26fae22933", "fullName": "tests.test_financier.TestFinancierCRUD#test_update_financier", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_financier"}, {"name": "subSuite", "value": "TestFinancierCRUD"}, {"name": "host", "value": "Mohsens-MacBook-Air.local"}, {"name": "thread", "value": "72563-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_financier"}]}